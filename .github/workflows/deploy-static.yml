name: 部署静态文件到服务器

on:
  # 允许手动触发
  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy:
    name: 构建并部署静态文件
    runs-on: ubuntu-latest
    
    steps:
      # 1. 检出代码
      - name: 📦 检出代码
        uses: actions/checkout@v4
      
      # 2. 设置 Node.js
      - name: 🔧 设置 Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
      
      # 3. 安装 pnpm
      - name: 📥 安装 pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
      
      # 4. 获取 pnpm store 目录
      - name: 🗂️ 获取 pnpm store 目录
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      # 5. 缓存依赖
      - name: 💾 缓存 pnpm 依赖
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      # 6. 安装依赖
      - name: 📦 安装项目依赖
        run: pnpm install --no-frozen-lockfile
      
      # 7. 构建生产版本（生成静态文件）
      - name: 🏗️ 构建生产版本
        run: NODE_OPTIONS="--max-old-space-size=6144" pnpm run build:prod
      
      # 8. 验证构建产物
      - name: ✅ 验证静态文件
        run: |
          if [ ! -d "dist-prod" ]; then
            echo "❌ 错误：dist-prod 目录不存在"
            exit 1
          fi
          echo "✅ 静态文件构建成功"
          echo "文件列表："
          ls -lh dist-prod/
      
      # 9. 打包静态文件
      - name: 📦 打包静态文件
        run: |
          cd dist-prod
          tar -czf ../dist-prod.tar.gz .
          cd ..
          echo "✅ 打包完成"
          ls -lh dist-prod.tar.gz
      
      # 10. 上传静态文件到服务器
      - name: 🚀 上传到服务器
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
        run: |
          # 安装 sshpass
          sudo apt-get update
          sudo apt-get install -y sshpass
          
          echo "上传静态文件到服务器..."
          sshpass -p "$SERVER_PASSWORD" scp -o StrictHostKeyChecking=no \
            dist-prod.tar.gz ${SERVER_USER}@${SERVER_HOST}:/tmp/
          
          echo "✅ 上传完成"
      
      # 11. 部署到 Nginx 目录
      - name: 📂 部署到 Nginx
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
        run: |
          echo "部署静态文件到 Nginx 目录..."
          sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no \
            ${SERVER_USER}@${SERVER_HOST} << 'ENDSSH'
            # Nginx 网站目录（硬编码）
            SITE_DIR="/www/wwwroot/smartprofit-ecommerce.com"
            echo "🚀 开始部署到: $SITE_DIR"
            # 备份当前版本
            if [ -d "$SITE_DIR" ] && [ "$(ls -A $SITE_DIR)" ]; then
              echo "💾 备份当前版本..."
              tar -czf /tmp/backup-$(date +%Y%m%d-%H%M%S).tar.gz -C $SITE_DIR . 2>/dev/null || true
            fi
            # 创建目标目录
            mkdir -p $SITE_DIR
            # 清空旧文件
            echo "🗑️ 清空旧文件..."
            rm -rf $SITE_DIR/*
            
            # 解压静态文件
            echo "📂 解压静态文件到 Nginx 目录..."
            tar -xzf /tmp/dist-prod.tar.gz -C $SITE_DIR
            
            # 设置权限（Nginx 用户）
            chown -R www:www $SITE_DIR
            chmod -R 755 $SITE_DIR
            
            # 验证部署
            echo "✅ 验证部署..."
            ls -lh $SITE_DIR/
            
            # 清理临时文件
            rm -f /tmp/dist-prod.tar.gz
            
            echo "✅ 部署完成！"

      
      # 12. 部署成功通知
      - name: ✅ 部署成功
        run: |
          echo "🎉 静态文件部署成功！"
          echo "网站地址: https://smartprofit-ecommerce.com"
          echo "或访问: http://${{ secrets.SERVER_HOST }}"

